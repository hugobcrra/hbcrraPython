#!/usr/bin/python
# -*- coding: utf-8 -*-
#UNAM-CERT
#Becerra Alvarado Hugo Alonso
#Cabrera Balderas Carlos Eduardo


import sys
import optparse
from requests import get 
from requests import options
import requests
from requests.exceptions import ConnectionError
import socks
from datetime import datetime
import socket
import re 
from re import search
from re import findall
import httplib                            
import urllib2

f1=open("reporte.txt",'w') #archivo que genera el reporte.

def printError(msg, exit = False):
	sys.stderr.write ('Error:\t%s\n' % msg)
	if exit:
		sys.exit(1)
def addOptions():
	parser = optparse.OptionParser()
	parser.add_option('-v','--verbose', dest='verbose', default=None, action= 'store_true', help='Detalles.')#No funciona uwu
	parser.add_option('-c', '--correo', dest='correo', default=None, help='Obtenemos el correo.')#ya, creemos que funciona
	parser.add_option('-s', '--server', dest='server', default=None, help='Nos da la version del servidor') #ya
	parser.add_option('-p', '--php', dest='php', action='store_true', default=None, help="Nos da la version de PHP.")#ya
	parser.add_option('-m', '--http', dest= 'http', default=None, action='store_true', help="Nos da los metodos http usados.")#ya
	parser.add_option('-C', '--cms', dest='cms', default=None, action='store_true', help="Nos da los cms.") #ya
	parser.add_option('-r', '--reporte', dest='reporte', default=None, action="store_true", help="Nos genera un reporte.")#ya
	parser.add_option('-t', '--tor', dest='tor', default=None, action="store_true", help="Se usara tor.")#No funciona
	parser.add_option('-b', '--busqueda', dest='busqueda', default=None, action="store_true", help="Se hara la busqueda.")#Ya
	opts,args = parser.parse_args()
	return opts

def checkOption(option):
	if option.server is None:
		printError('Especifica un servidor.', True)

def busqueda(opts):
	try:
		arch=open('archivos.txt','w') #Para guardar el contenido encontredo en el servidor
		with open('bfiles.txt', 'r') as lst: #archivo que muestra el nombre de los posibles archivos que se pueden encontrar en el servidor
			listaB = lst.readline()
			#print lst
			for l in listaB:
				url_files = opts.server + "/" + l
				nope = 0 
				rqst=requests.get(url_files[:-1:])

				if rqst.status_code == 200:

					for mala in rqst.history:
						if mala.status_code==302:
							nope = 1
					if nope == 0: 
						print 'Abra el archivo "archivos.txt" para ver los archivos almacenados'
						f1.write(l)
						arch.write(l)

			lst.close()
	except Exception as e:
		printError("No hay archivos")

if __name__ == '__main__':
	try:
		opts = addOptions()
		checkOption(opts)

		if opts.verbose == True:
			print "Ingresaste verbose"
		if opts.correo == True:
			"""
			Busca dentro del código html los correos que se encuentren en este, usando findall y 
			expresiones regulares, mostrando los posibles correos encontrados.
			"""
			try:
				pet = urllib2.Request(opts.server) 
				html1 = urllib2.urlopen(pet).read()
				co = re.findall("[a-z]+\.*[a-z]*@.*\..*", html1)
				f1.write("\nLos correos son: %s\n" % co) 
				print 'Los correos son: %s' % co
			except:
				print 'No encontré correos :/'
		if opts.server != False:
			"""
			Busca en las cabeceras http el servidor y muestra el nombre de este.
			"""
			try:
				re_server = get(opts.server).headers['server'] #Trae la cabecera headers, y mestra el nombre
				f1.write("\nEl servidor que usa es: %s\n" % re_server)#guarda el resultado en el reporte.txt
				print "La version del servidor es %s" % re_server
			except:
				print 'No se puedo obtener la versión del servidor uwu' #Si no encuentra la cabecera, manda este error.

		if opts.php == True:
			"""
			Muestra la versión de PHP que maneja el servidor, obteniendo el nombre de la cabecera X-Powered-By
			y guardando el resultado en el reporte.txt
			"""
			try:
				re_php = options(opts.server).headers['X-Powered-By']
				f1.write("\nLa version de PHP que usa es: %s\n" % re_php)
				print "La version del servidor es %s" % re_php
			except:
				print 'No se pudo obtener la versión de php uwu'

		if opts.http == True:
			"""
			Obtiene los métdos https, a trevés de la cabecera Allow, esta nos muestra los métodos que permite y maneja el sitio web
			"""
			try:
				re_http = requests.options(opts.server).headers['allow']
				f1.write("\nLos metodos http que usa son: %s\n" % re_http)
				print "Los metodos http que usa son: %s " % re_http
			except:
				print 'No se encontró los métodos :O'

		if opts.cms == True:
			"""
			Obtiene el CMS (content management system), buscando en el código HTML, su <meta name='Generator' content=*>
			después, sólo queremos lo que hay en content así que hacemos un split para obtener solo el content
			"""
			try:
				req = urllib2.Request(opts.server)
				html = urllib2.urlopen(req).read()
				patron = re.findall('<meta name=\"Generator\" content=\".*\"', html)
				print "El cms es " + patron[0].split("\"")[3] + "\n"
			except:
				print 'No se pudo obtener el cms xS'

		if opts.reporte == True:
			"""
			Muestra el servidor y la fecha en la cual se realizó el escaneo.
			"""
			f1.write("\nFecha: " + str(datetime.now()) + "\nURL: " + opts.server)
		if opts.tor == True:
			print "Ingresaste tor."
		if opts.busqueda == True:
			try:
				busqueda(opts)
			except:
				print 'No hay busqueda xS'
	except Exception as e:
		printError('Ocurrio un error inesperado')
		printError(e, True)

f1.close()
#Feliz Navidad :D y prospero año nuevo

